class Solution {
    public int search(int[] nums, int target) {
        // Check if the array is empty, if so, return -1
        if (nums.length == 0) return -1;
        
        // Initialize left and right pointers
        int l = 0, r = nums.length - 1;

        // Find the index of the largest element in the rotated sorted array
        while (l < r) {
            // Calculate the middle index, biasing towards the right
            int mid = l + r + 1 >> 1;
            // If the middle element is greater than or equal to the first element,
            // it means mid is in the left sorted portion of the array
            if (nums[mid] >= nums[0]) l = mid;
            // Otherwise, mid is in the right sorted portion of the array
            else r = mid - 1;
        }

        // Determine which part of the array the target is in
        if (target >= nums[0]) l = 0; // Target is in the left sorted portion
        else {
            l = r + 1; // Target is in the right sorted portion
            r = nums.length - 1;
        }

        // Perform binary search in the determined portion of the array
        while (l < r) {
            // Calculate the middle index
            int mid = l + r >> 1;
            // If the middle element is greater than or equal to the target,
            // the target must be in the left half
            if (nums[mid] >= target) r = mid;
            // Otherwise, the target must be in the right half
            else l = mid + 1;
        }

        // Check if the found element is the target
        if (nums[r] == target) return r;
        else return -1; // Target not found
    }
}

