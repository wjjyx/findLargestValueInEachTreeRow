class Solution {
    public List<Integer> rightSideView(TreeNode root) {
        // Initialize the result list to store the right side view values
        List<Integer> result = new ArrayList<>();
        
        // If the root is null, return the empty result list
        if (root == null) {
            return result;
        }
        
        // Initialize a queue to perform breadth-first search (BFS)
        Queue<TreeNode> queue = new LinkedList<>();
        queue.offer(root);
        
        // Perform BFS to traverse the tree level by level
        while (!queue.isEmpty()) {
            int size = queue.size();
            
            // Iterate through the current level
            for (int i = 0; i < size; i++) {
                // Remove the current node from the queue
                TreeNode curr = queue.remove();
                
                // If this is the last node in the current level, add its value to the result list
                if (i == size - 1) {
                    result.add(curr.val);
                }
                
                // Add the left child to the queue if it exists
                if (curr.left != null) {
                    queue.offer(curr.left);
                }
                
                // Add the right child to the queue if it exists
                if (curr.right != null) {
                    queue.offer(curr.right);
                }
            }
        }
        
        // Return the result list containing the right side view values
        return result;
    }
}
