class Solution {
    // Method to find the starting and ending positions of a given target value in a sorted array
    public int[] searchRange(int[] nums, int target) {
        // Initialize the result array to store the starting and ending positions with default values of -1
        int[] res = {-1, -1};

        // If the array is empty, return the default result array
        if (nums.length == 0) return res;

        // Finding the starting position
        int l = 0, r = nums.length - 1; // Initialize left and right pointers

        // Binary search loop to find the first occurrence of the target
        while (l < r) {
            int mid = l + r >> 1; // Calculate the midpoint
            // If the midpoint value is greater than or equal to the target, search in the left half
            if (nums[mid] >= target) r = mid;
            // If the midpoint value is less than the target, search in the right half
            else l = mid + 1;
        }

        // Check if the found position contains the target value
        if (nums[l] == target) res[0] = l;
        // If the target is not found, return the result array with default values
        else return res;

        // Finding the ending position
        l = 0; // Reset the left pointer
        r = nums.length - 1; // Reset the right pointer

        // Binary search loop to find the last occurrence of the target
        while (l < r) {
            int mid = l + r + 1 >> 1; // Calculate the midpoint
            // If the midpoint value is less than or equal to the target, search in the right half
            if (nums[mid] <= target) l = mid;
            // If the midpoint value is greater than the target, search in the left half
            else r = mid - 1;
        }

        // Store the ending position in the result array
        res[1] = l;
        // Return the result array containing the starting and ending positions of the target
        return res;
    }
}
