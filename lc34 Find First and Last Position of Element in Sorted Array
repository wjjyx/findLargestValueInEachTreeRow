class Solution {
    // Method to find the starting and ending positions of a given target value in a sorted array
    public int[] searchRange(int[] nums, int target) {
        // Initialize the result array to store the starting and ending positions
        int[] result = new int[2];
        // Find the first position of the target
        result[0] = findFirstPosition(nums, target);
        // Find the last position of the target
        result[1] = findLastPosition(nums, target);
        // Return the result array
        return result;
    }

    // Helper method to find the first occurrence of the target
    private int findFirstPosition(int[] nums, int target) {
        // Initialize left and right pointers
        int left = 0, right = nums.length - 1;
        // Variable to store the position of the first occurrence
        int position = -1;
        // Binary search loop
        while (left <= right) {
            // Calculate the midpoint
            int mid = left + (right - left) / 2;
            // If the midpoint value is equal to the target
            if (nums[mid] == target) {
                // Update the position
                position = mid;
                // Continue searching in the left half
                right = mid - 1;
            } else if (nums[mid] < target) {
                // If the midpoint value is less than the target, search in the right half
                left = mid + 1;
            } else {
                // If the midpoint value is greater than the target, search in the left half
                right = mid - 1;
            }
        }
        // Return the position of the first occurrence
        return position;
    }

    // Helper method to find the last occurrence of the target
    private int findLastPosition(int[] nums, int target) {
        // Initialize left and right pointers
        int left = 0, right = nums.length - 1;
        // Variable to store the position of the last occurrence
        int position = -1;
        // Binary search loop
        while (left <= right) {
            // Calculate the midpoint
            int mid = left + (right - left) / 2;
            // If the midpoint value is equal to the target
            if (nums[mid] == target) {
                // Update the position
                position = mid;
                // Continue searching in the right half
                left = mid + 1;
            } else if (nums[mid] < target) {
                // If the midpoint value is less than the target, search in the right half
                left = mid + 1;
            } else {
                // If the midpoint value is greater than the target, search in the left half
                right = mid - 1;
            }
        }
        // Return the position of the last occurrence
        return position;
    }
}
